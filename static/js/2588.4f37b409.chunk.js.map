{"version":3,"file":"static/js/2588.4f37b409.chunk.js","mappings":"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","sources":["views/Postman/Postman.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport ReactJson from \"react-json-view\";\n\nclass Postman extends Component {\n  state = {\n    form: {\n      method: \"GET\",\n      url: \"\",\n      queryParams: \"\",\n      body: []\n    },\n    baseUrl: \"\",\n    token: \"\",\n    data: {},\n    loading: false,\n    bodyType: \"application/json\",\n    collection: []\n  };\n\n  toggle = () => {\n    this.setState(state => ({\n      loading: !state.loading\n    }));\n  };\n  componentDidMount() {\n    const baseUrl = localStorage.getItem(\"baseUrl\");\n    const token = localStorage.getItem(\"token\");\n    const collection = JSON.parse(localStorage.getItem(\"collection\"));\n    const { item } = collection;\n    if (item) {\n      this.setState({\n        collection: item\n      });\n    }\n    if (baseUrl) {\n      this.setState(\n        {\n          baseUrl\n        },\n        () =>\n          this.setState({\n            form: {\n              ...this.state.form,\n              url: baseUrl\n            }\n          })\n      );\n    }\n    if (token) {\n      this.setState({\n        token\n      });\n    }\n  }\n\n  handleChange = e => {\n    const value = e.target.value;\n    const name = e.target.name;\n    this.setState(state => ({\n      form: {\n        ...state.form,\n        [name]: value\n      }\n    }));\n  };\n\n  handleVariablesChange = e => {\n    const value = e.target.value;\n    const name = e.target.name;\n    const saveToLocalStorage = () => {\n      localStorage.setItem(name, value);\n    };\n    this.setState(\n      state => ({\n        [name]: value\n      }),\n      saveToLocalStorage\n    );\n  };\n  handleSubmit = e => {\n    this.toggle();\n    e.preventDefault();\n    const { form, bodyType, token } = this.state;\n\n    const getFormData = data => {\n      const fd = new FormData();\n      data.forEach(({ key, value }, i) => {\n        fd.append(key, value);\n      });\n\n      return fd;\n    };\n    const getJson = data => {\n      const obj = {};\n      data.forEach(({ key, value }) => {\n        obj[key] = value;\n      });\n    };\n    const getOptions = () => {\n      if (form.method == \"post\") {\n        return {\n          method: form.method.toUpperCase(),\n          body:\n            bodyType == \"application/json\"\n              ? JSON.stringify(getJson(form.body))\n              : getFormData(form.body),\n          headers: {\n            \"Content-Type\":\n              bodyType == \"json\"\n                ? \"application/json\"\n                : \"application/x-www-form-urlencoded\",\n            Authorization: \"Bearer \" + token\n          }\n        };\n      } else {\n        return {\n          headers: {\n            Authorization: \"Bearer \" + token\n          }\n        };\n      }\n    };\n    fetch(form.url, getOptions())\n      .then(res => res.json())\n      .then(data =>\n        this.setState({\n          data\n        })\n      )\n      .finally(this.toggle);\n    console.log(\"form\", this.state.form);\n  };\n  formBody = method => {\n    switch (method) {\n      case \"GET\":\n        let key = \"\";\n        let value = \"\";\n        const handleSubmit = e => {\n          e.preventDefault();\n          const newQueryParams = new URLSearchParams(\n            this.state.form.queryParams\n          );\n          if (newQueryParams.has(key)) {\n            newQueryParams.set(key, value);\n          } else {\n            newQueryParams.append(key, value);\n          }\n          this.setState(\n            state => ({\n              form: {\n                ...state.form,\n                queryParams: newQueryParams.toString()\n              }\n            }),\n            () =>\n              this.setState(state => {\n                const url = new URL(state.form.url);\n                url.search = newQueryParams;\n                return {\n                  form: {\n                    ...state.form,\n                    url: url.toString()\n                  }\n                };\n              })\n          );\n        };\n        const {\n          form: { queryParams }\n        } = this.state;\n        return (\n          <div\n            style={{\n              marginTop: 30,\n              borderTop: \"1px solid #ddd\",\n              paddingTop: 10\n            }}\n          >\n            <h3 style={{ width: \"100%\", display: \"block\" }}> query params</h3>\n            <form onSubmit={handleSubmit} style={{ display: \"flex\" }}>\n              <input\n                type=\"text\"\n                onChange={e => (key = e.target.value)}\n                style={{ flexGrow: \"1\", marginRight: 5 }}\n                placeholder=\"key\"\n              />\n              <input\n                type=\"text\"\n                onChange={e => (value = e.target.value)}\n                style={{ flexGrow: \"1\", marginRight: 5 }}\n                placeholder=\"key\"\n              />\n              <button style={{ flexGrow: 1 }} type=\"submit\">\n                add\n              </button>\n            </form>\n          </div>\n        );\n        break;\n      default:\n        const changeBody = () => {\n          this.setState(state => ({\n            form: {\n              ...state.form,\n              body: state.form.body.concat({ key, value })\n            }\n          }));\n          //   const fd = new FormData();\n          //   for (var i in jsonBody) {\n          //     fd.append(i, jsonBody[i]);\n          //   }\n        };\n\n        const handleChange = event => {\n          const name = event.target.name;\n          const eValue = event.target.value;\n          if (event.target.name == \"key\") {\n            key = eValue;\n          } else {\n            value = eValue;\n          }\n        };\n        return (\n          <div\n            style={{\n              marginTop: 30,\n              borderTop: \"1px solid #ddd\",\n              paddingTop: 10\n            }}\n          >\n            <h3 style={{ width: \"100%\", display: \"block\" }}>body</h3>\n            <select\n              onChange={e =>\n                this.setState({\n                  bodyType: e.target.value\n                })\n              }\n            >\n              <option value=\"application/json\">json</option>\n              <option value=\"application/x-www-form-urlencoded\">\n                formdata\n              </option>\n            </select>\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n              {this.state.form.body.map((item, i) => {\n                return (\n                  <div\n                    key={\"body\" + i}\n                    style={{\n                      display: \"flex\",\n                      alignItems: \"flex-start\",\n                      justifyContent: \"space-between\"\n                    }}\n                  >\n                    <input\n                      type=\"text\"\n                      value={item.key}\n                      onChange={({ target: { value } }) => {\n                        this.setState(state => ({\n                          form: {\n                            ...state.form,\n                            body: state.form.body.map(body =>\n                              body.key == item.key && body.value == item.value\n                                ? {\n                                    key: value,\n                                    value: body.value\n                                  }\n                                : body\n                            )\n                          }\n                        }));\n                      }}\n                      placeholder=\"key\"\n                      style={{ flexGrow: 1, marginRight: 5, marginBottom: 5 }}\n                    />\n                    <input\n                      type=\"text\"\n                      value={item.value}\n                      onChange={({ target: { value } }) => {\n                        this.setState(state => ({\n                          form: {\n                            ...state.form,\n                            body: state.form.body.map(body =>\n                              body.key == item.key && body.value == item.value\n                                ? {\n                                    key: body.key,\n                                    value: value\n                                  }\n                                : body\n                            )\n                          }\n                        }));\n                      }}\n                      placeholder=\"value\"\n                      style={{ flexGrow: 1, marginRight: 5, marginBottom: 5 }}\n                    />\n                  </div>\n                );\n              })}\n              <div\n                style={{\n                  display: \"flex\",\n                  alignItems: \"flex-start\",\n                  justifyContent: \"space-between\"\n                }}\n              >\n                <input\n                  type=\"text\"\n                  name=\"key\"\n                  onChange={handleChange}\n                  placeholder=\"key\"\n                  style={{ flexGrow: 1, marginRight: 5 }}\n                />\n                <input\n                  type=\"text\"\n                  name=\"value\"\n                  onChange={handleChange}\n                  placeholder=\"value\"\n                  style={{ flexGrow: 1, marginRight: 5 }}\n                />\n                <button style={{ flexGrow: 1 }} onClick={changeBody}>\n                  add\n                </button>\n              </div>\n            </div>\n          </div>\n        );\n    }\n  };\n  changeFile = event => {\n    var reader = new FileReader();\n    reader.onload = this.onReaderLoad;\n    reader.readAsText(event.target.files[0]);\n  };\n\n  onReaderLoad = event => {\n    console.log(event.target.result);\n    var obj = JSON.parse(event.target.result);\n    localStorage.setItem(\"collection\", JSON.stringify(obj));\n    console.log(\"obj\", obj);\n  };\n\n  clickCollection = item => {\n    console.log(item);\n    this.setState(state => ({\n      form: {\n        ...state.form,\n        url: item.request.url.raw,\n        method: item.request.method\n      }\n    }));\n  };\n  render() {\n    const { form, baseUrl, token, loading, collection } = this.state;\n\n    return (\n      <div style={{ direction: \"ltr\", textAlign: \"left\", display: \"flex\" }}>\n        <div style={{ width: \"20%\" }}>\n          {collection &&\n            collection.map((item, index) => {\n              return (\n                <a\n                  key={\"item\" + index}\n                  style={{\n                    display: \"block\",\n                    borderBottom: \"1px solid #ddd\",\n                    cursor: \"pointer\",\n                    width: \"80%\",\n                    marginTop: 10\n                  }}\n                  onClick={() => this.clickCollection(item)}\n                >\n                  {item.name}\n                </a>\n              );\n            })}\n        </div>\n        <div style={{ width: \"80%\" }}>\n          <div>\n            <label>\n              import file\n              <input type=\"file\" onChange={this.changeFile} />\n            </label>\n          </div>\n          <div style={{ display: \"flex\", marginBottom: \"20px\" }}>\n            <input\n              type=\"text\"\n              value={baseUrl}\n              onChange={this.handleVariablesChange}\n              name=\"baseUrl\"\n              style={{ flexGrow: \"1\", marginRight: 5 }}\n              placeholder=\"baseUrl\"\n            />\n            <input\n              type=\"text\"\n              value={token}\n              onChange={this.handleVariablesChange}\n              name=\"token\"\n              style={{ flexGrow: \"1\" }}\n              placeholder=\"token\"\n            />\n          </div>\n          <form\n            onSubmit={this.handleSubmit}\n            style={{\n              direction: \"ltr\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"space-between\"\n            }}\n          >\n            <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n              <select\n                onChange={this.handleChange}\n                value={form.method}\n                name=\"method\"\n              >\n                <option value=\"get\">get</option>\n                <option value=\"post\">post</option>\n              </select>\n              <input\n                type=\"text\"\n                value={form.url}\n                onChange={this.handleChange}\n                name=\"url\"\n                style={{ flexGrow: \"1\" }}\n              />\n              <button type=\"submit\">send</button>\n            </div>\n          </form>\n          {this.formBody(form.method)}\n          <div\n            style={{\n              borderTop: \"1px solid #ddd\",\n              marginTop: 30,\n              paddingTop: 10\n            }}\n          >\n            <h3>response</h3>\n            {loading ? \"loading\" : <ReactJson src={this.state.data} />}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Postman;\n"],"names":["Postman","state","form","method","url","queryParams","body","baseUrl","token","data","loading","bodyType","collection","toggle","setState","handleChange","e","value","target","name","handleVariablesChange","localStorage","setItem","handleSubmit","preventDefault","getFormData","fd","FormData","forEach","i","key","append","getJson","obj","fetch","toUpperCase","JSON","stringify","headers","Authorization","then","res","json","finally","console","log","formBody","style","marginTop","borderTop","paddingTop","width","display","onSubmit","newQueryParams","URLSearchParams","has","set","toString","URL","search","type","onChange","flexGrow","marginRight","placeholder","event","eValue","flexDirection","map","item","alignItems","justifyContent","marginBottom","onClick","concat","changeFile","reader","FileReader","onload","onReaderLoad","readAsText","files","result","parse","clickCollection","request","raw","getItem","this","direction","textAlign","index","borderBottom","cursor","src","Component"],"sourceRoot":""}